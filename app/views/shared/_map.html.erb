<div class="map-container">
  <div id="map"></div>
  <div class="map-info">
    <p>Location: <span class="coordinates" id="location-coordinates">Loading...</span></p>
    <% if defined?(readonly) && readonly %>
      <p><small>This map shows your current saved location.</small></p>
    <% else %>
      <p><small>Drag the marker to update your address, or fill in the address fields manually.</small></p>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize the map
    var map = L.map('map').setView([0, 0], 2);
    var marker;
    
    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    // Function to update form fields with address data
    function updateAddressFields(lat, lng) {
      fetch(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lng}&format=json`)
        .then(response => response.json())
        .then(data => {
          const address = data.address;
          
          // Update coordinates display
          document.getElementById('location-coordinates').textContent = 
            `${lat.toFixed(6)}, ${lng.toFixed(6)}`;

          <% unless defined?(readonly) && readonly %>
            // Update form fields if they exist
            const streetField = document.querySelector('input[name="user[street]"]');
            const cityField = document.querySelector('input[name="user[city]"]');
            const zipField = document.querySelector('input[name="user[zip]"]');

            if (streetField) {
              const street = [address.house_number, address.road].filter(Boolean).join(' ');
              streetField.value = street;
            }

            if (cityField) {
              cityField.value = address.city || address.town || address.village || '';
            }

            if (zipField) {
              zipField.value = address.postcode || '';
            }
          <% end %>
        })
        .catch(error => {
          console.error('Error fetching address:', error);
        });
    }

    // Function to handle marker movement
    function onMarkerMove(e) {
      const position = e.target.getLatLng();
      updateAddressFields(position.lat, position.lng);
    }

    <% if @user&.latitude.present? && @user&.longitude.present? %>
      // Use saved coordinates
      var lat = <%= @user.latitude %>;
      var lng = <%= @user.longitude %>;
      map.setView([lat, lng], 13);
      
      // Add marker
      marker = L.marker([lat, lng], { 
        draggable: <%= !(defined?(readonly) && readonly) %> 
      }).addTo(map);
      
      if (!<%= !!(defined?(readonly) && readonly) %>) {
        marker.on('dragend', onMarkerMove);
      }
      
      // Update coordinates display
      document.getElementById('location-coordinates').textContent = 
        `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
    <% else %>
      // Try to get user's location
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var lat = position.coords.latitude;
          var lng = position.coords.longitude;
          
          // Update map view
          map.setView([lat, lng], 13);
          
          // Add draggable marker
          marker = L.marker([lat, lng], { 
            draggable: <%= !(defined?(readonly) && readonly) %> 
          }).addTo(map);
          
          if (!<%= !!(defined?(readonly) && readonly) %>) {
            marker.on('dragend', onMarkerMove);
          }
          
          // Initial address lookup
          updateAddressFields(lat, lng);
          
          // Add accuracy circle
          var circle = L.circle([lat, lng], {
            color: '#007bff',
            fillColor: '#007bff',
            fillOpacity: 0.1,
            radius: position.coords.accuracy
          }).addTo(map);
          
        }, function(error) {
          document.getElementById('location-coordinates').textContent = 
            'Unable to get location: ' + error.message;
        });
      } else {
        document.getElementById('location-coordinates').textContent = 
          'Geolocation is not supported by your browser';
      }
    <% end %>

    <% unless defined?(readonly) && readonly %>
      // Allow clicking on map to set location
      map.on('click', function(e) {
        const lat = e.latlng.lat;
        const lng = e.latlng.lng;

        // Update or create marker
        if (marker) {
          marker.setLatLng([lat, lng]);
        } else {
          marker = L.marker([lat, lng], { draggable: true }).addTo(map);
          marker.on('dragend', onMarkerMove);
        }

        updateAddressFields(lat, lng);
      });
    <% end %>
  });
</script> 